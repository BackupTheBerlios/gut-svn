Version 0.1.4
-----------------------------------------------------------------

* Remove utx_msw_SetInputWindow(), deprecated

* Moved EVENT_CHAR value from arg0 to arg1 (is this done? why 
  is it listed here?)

* When button is pressed, value of arg1 should be INT_MAX. This 
  will make it match up better with the axis code

* Implement timer call, use for current time in dinput code and
  also in msw window create in the focus message

* Clean up X11 input code
  * Comments
  
* Keyboard input
  * Check state of key before sending message. Shouldn't
    duplicate the current state
  * Release all pressed buttons when window loses focus
  
* I think the "write info about the input device to the log" 
  really ought to be in ut_input.cpp, not the platform layers

* Add a window minimized or hidden event

* Look at Q3, neb2, other DirectInput implementations for ideas

* Test with additional build tools

* I don't like utFindWindowByHandle(), or rather I don't like
  the implementation of using a base class for it.

* Omit frame pointer from release builds

* Remove deprecated msw_input_fb.cpp

* Search for BlackPixel, use it to set X11 window background

* Docs: Windows port now requires DX8 (for DirectInput. I might
  be able to use an earlier version. Anyone have an opinion?) 
  Because the latest releases of DX8 are compiled with security
  checks (as all recent MS software) it causes linker errors in 
  VC6. So you'll either have to a) upgrade to VS2003, or b) use
  an older version of DirectX, or c) download Cygwin and build
  it using GNU make and GCC, or d) download the free MS C++
  compiler, generate the VC6 files and use Code::Blocks to
  build them (see http://www.codeblocks.org/). I will try to
  get native support for Code::Blocks into Premake soon.
  *** ACTUALLY *** it will build in release mode, but not
  debug mode, so you can do that too.

Keyboard input should support key repeats and character input for
user interfaces.

Should support both action maps and character codes. Should be
able to poll current states and also receive notification events.
How are actions mapped (a device ID I think, which can be 
converted to/from a string representation). Also, how to take an
inventory of input devices and know when it has changed? Should
be able to tell when USB devices have been plugged into a 
different port. So instead of mapping "Controller0" try to map
"Gravis Pro 1000" and then locate it. There may be more than
one device with the same name (?) so will still need an offset
on that perhaps.

Also need to be able to provide a default mapping, which might
include keyboard directional keys, mouse movement, and maybe 
even a default controller configuration. I may not care about
what controller is plugged in, I may just want Ctrl0. So that
should be possible. The toolkit isn't going to provide any
action mapping so I don't have to worry about that.

int utGetInputDeviceByType(int type, int i);  /* where type is one of keyboard, mouse, etc. */
int utGetInputDeviceByDescription(const char* description, int i); 

int utGetButtonState(int deviceId, int buttonId);
int utGetAxisState(int deviceId, int axisId);
int utGetHatState(int deviceId, int hatId);

int utEnableKeyboardRepeat(int ixKeyboard, int fEnable);

event.what = KEYBOARD_BUTTON
event.arg0 = device id
event.arg1 = button id
event.arg2 = button state

event.what = KEYBOARD_REPEAT
event.arg0 = device id
event.arg1 = button id
event.arg2 = button state (1)

event.what = CHARACTER
event.arg0 = char
event.arg1 = repeating
event.arg2 = 0

System must track button (and probably axis) states. When focus is lost,
the buttons should all release.


Version 0.1.5
-----------------------------------------------------------------

* Mouse input
* Timer access
* Allow blocking event loop for non-realtime applications

event.what = MOUSE_BUTTON
event.arg0 = device id
event.arg1 = button id
event.arg2 = button state

event.what = MOUSE_AXIS
event.arg0 = device id
event.arg1 = axis id
event.arg2 = axis delta


Version 0.1.6
-----------------------------------------------------------------

* Controller input (basic)


Future Releases
-----------------------------------------------------------------

* Multiple monitors? At least a way to query the monitors and
  maybe their placement?
  
* Get *.txt added as solution items (premake)

